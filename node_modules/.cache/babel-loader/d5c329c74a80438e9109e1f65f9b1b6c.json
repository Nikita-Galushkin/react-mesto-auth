{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  getInitialsCards() {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  patchUserInfo(info) {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(info)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  patchUserAvatar(link) {\n    return fetch(`${this._baseUrl}users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(link)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  postCard(card) {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(card)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  removeCard(id) {\n    return fetch(`${this._baseUrl}cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  addLikeCard(cardId) {\n    return fetch(`${this._baseUrl}cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  removeLikeCard(cardId) {\n    return fetch(`${this._baseUrl}cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  changeLikeCardStatus(cardId) {\n    return fetch(`${this._baseUrl}cards/${id}`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(cardId)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-15/',\n  headers: {\n    authorization: 'fa7c1664-18f3-41d8-b132-37b50e07ed81',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/family/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","getInitialsCards","fetch","method","then","res","ok","json","Promise","reject","status","statusText","getUserInfo","patchUserInfo","info","body","JSON","stringify","patchUserAvatar","link","postCard","card","removeCard","id","addLikeCard","cardId","removeLikeCard","changeLikeCardStatus","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  getInitialsCards() {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'GET',\n      headers: this._headers,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  } \n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'GET',\n      headers: this._headers,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  patchUserInfo(info) {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(info)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  patchUserAvatar(link) {\n    return fetch(`${this._baseUrl}users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(link)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  postCard(card) {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(card)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  removeCard(id) {\n    return fetch(`${this._baseUrl}cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  addLikeCard(cardId) {\n    return fetch(`${this._baseUrl}cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  removeLikeCard(cardId) {\n    return fetch(`${this._baseUrl}cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  changeLikeCardStatus(cardId) {\n    return fetch(`${this._baseUrl}cards/${id}`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(cardId)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-15/',\n  headers: {\n    authorization: 'fa7c1664-18f3-41d8-b132-37b50e07ed81',\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}