{"ast":null,"code":"export var BASE_URL='https://auth.nomoreparties.co';export var register=function register(email,password){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(function(res){return res.ok?res.json():res.status(400).send({message:'некорректно заполнено одно из полей'});});};export var authorize=function authorize(email,password){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(function(res){if(res.status===400){res.status(400).res.send({message:'Не передано одно из полей'});}else if(res.status===401){res.status(401).res.send({message:'Пользователь с таким email не найден'});}return res.json();});};export var getContent=function getContent(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json','Authorization':\"Bearer \".concat(token)}}).then(function(res){if(!res.ok){return res.json().then(function(err){res.status(401).res.send(err.message);});}return res.json();});};","map":{"version":3,"sources":["/Users/family/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","ok","json","status","send","message","authorize","getContent","token","err"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,QAAQ,CAAG,+BAAjB,CAEP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAQC,QAAR,CAAqB,CAC3C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CACjCK,MAAM,CAAE,MADyB,CAEjCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAFwB,CAMjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEP,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CAN2B,CAAvB,CAAL,CAQNO,IARM,CAQD,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,EAAJ,CACbD,GAAG,CAACE,IAAJ,EADa,CAEbF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAEC,OAAO,CAAE,qCAAX,CAArB,CAFI,EARC,CAAP,CAWD,CAZM,CAcP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACf,KAAD,CAAQC,QAAR,CAAqB,CAC5C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CACjCK,MAAM,CAAE,MADyB,CAEjCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAFwB,CAMjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEP,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CAN2B,CAAvB,CAAL,CAQNO,IARM,CAQD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACG,MAAJ,GAAe,GAAnB,CAAwB,CACtBH,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBH,GAAhB,CAAoBI,IAApB,CAAyB,CAAEC,OAAO,CAAE,2BAAX,CAAzB,EACD,CAFD,IAGK,IAAIL,GAAG,CAACG,MAAJ,GAAe,GAAnB,CAAwB,CAC3BH,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBH,GAAhB,CAAoBI,IAApB,CAAyB,CAAEC,OAAO,CAAE,sCAAX,CAAzB,EACD,CACD,MAAOL,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CAhBM,CAAP,CAiBD,CAlBM,CAoBP,MAAO,IAAMK,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CACnC,MAAOf,CAAAA,KAAK,WAAIJ,QAAJ,cAAyB,CACnCK,MAAM,CAAE,KAD2B,CAEnCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAGP,iCAA2Ba,KAA3B,CAHO,CAF0B,CAAzB,CAAL,CAQNT,IARM,CAQD,SAACC,GAAD,CAAS,CACb,GAAI,CAACA,GAAG,CAACC,EAAT,CAAa,CACX,MAAOD,CAAAA,GAAG,CAACE,IAAJ,GACJH,IADI,CACC,SAACU,GAAD,CAAS,CACbT,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBH,GAAhB,CAAoBI,IAApB,CAAyBK,GAAG,CAACJ,OAA7B,EACD,CAHI,CAAP,CAID,CACD,MAAOL,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CAhBM,CAAP,CAiBD,CAlBM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => res.ok \n  ? res.json() \n  : res.status(400).send({ message: 'некорректно заполнено одно из полей' }));\n};\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => {\n    if (res.status === 400) {\n      res.status(400).res.send({ message: 'Не передано одно из полей' });\n    }\n    else if (res.status === 401) {\n      res.status(401).res.send({ message: 'Пользователь с таким email не найден' });\n    }\n    return res.json();\n  });\n};\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then((res) => {\n    if (!res.ok) {\n      return res.json()\n        .then((err) => {\n          res.status(401).res.send(err.message);\n        });\n    }\n    return res.json()\n  })\n};"]},"metadata":{},"sourceType":"module"}